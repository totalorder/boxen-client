#!/usr/bin/env bash
set -o errexit
set -o nounset
set -o pipefail
if [[ -z "${RUNNING_ON_PI:-}" ]]; then
  TARGET_HOST=""
  if [[ "${1:-}" == "--target-host" ]]; then
    TARGET_HOST="$2"
    shift 2
  else
    if [ ! -f "pi-ip.txt" ]; then
    cat <<EOF
No pi-ip.txt found. Please run the following commands **on the pi**:

Use the Raspberry Pi Imager (https://www.raspberrypi.com/software/) to install Ubuntu 22.04 Server LTS (64 bit)
Preconfigure it using the username "ubuntu", set up Wifi and authorized_keys.

If a raw Ubuntu image is installed with for example Rufus, run the commands below:

# Create a config file for wifi
sudo vim /etc/netplan/99-custom-network.yaml

# Put this config in the file, replacing SSID-NAME-HERE and PASSWORD-HERE
network:
  wifis:
    wlan0:
      optional: true
      access-points:
        "SSID-NAME-HERE":
          password: "PASSWORD-HERE"
      dhcp4: true
  version: 2

# Connect to wifi
sudo netplan --debug apply

# Install openssh-server
sudo apt update && sudo apt install -y openssh-server

# Print the IP
ip address show | grep "wlan0" -A 5 | grep "inet " | awk -F'[ /]' '{ print $6 }'

# (optionally) Set the hostname to distinguish the pi from other pis
# hostnamectl set-hostname newhostname

# Then **on your PC**, put the IP of the pi, from the step above, in a file called pi-ip.txt
echo "USERNAME@PI-IP-HERE" > pi-ip.txt

# Rerun this script
EOF
      exit 1
    fi
    TARGET_HOST="$(cat pi-ip.txt)"
  fi

  echo "* Setting up ssh authorized_keys"
  ssh "${TARGET_HOST}" mkdir -p .ssh && scp ~/.ssh/id_*.pub "${TARGET_HOST}:.ssh/authorized_keys"

  echo "* Uploading install script pi"
  scp install-ubuntu-server-22-04 "${TARGET_HOST}:."

  echo "* Running install script on pi"
  ssh -t "${TARGET_HOST}" "RUNNING_ON_PI=true ./install-ubuntu-server-22-04"

  echo "* Installing usbwifi"
  (cd usbwifi && ./install "${TARGET_HOST}")

  ./build-to-pi --target-host "${TARGET_HOST}"

  echo "* Installing as systemd service"
  (cd systemd && ./install "${TARGET_HOST}")

  echo "* Adafruit Voice Bonnet setup. After reboot, you can test it manually with:"
  echo '* $ CARD_ID="$(aplay -l | grep seeed | cut -d '\'' '\'' -f 2 | cut -d '\'':'\'' -f 1)" && amixer -c "$CARD_ID" sset Speaker "79%" && sudo arecord -c2 -f S16_LE -r 16000 --device="hw:$CARD_ID,0" | aplay -Dhw:"$CARD_ID"'
  echo ""
  echo "* Before shipping, enable read-only filesystem like this (enabled on reboot):"
  echo "* $ git clone git@github.com:totalorder/overlayfs.git && (cd overlayfs && sudo setup.sh)"
  echo ""
  echo "* On the \"server\", run:"
  echo "* $ ssh ${TARGET_HOST} echo \"1\" > id.txt"
  echo "* On the \"client\", run:"
  echo "* $ ssh ${TARGET_HOST} echo \"1\" > peer-id.txt"

  read -p "* The pi needs to reboot. Do this now? (Y/n): " -n 1 -r REPLY
  echo ""
  if [[ ${REPLY:-y} =~ ^[Yy]$ ]]
  then
      ssh -t "${TARGET_HOST}" "sudo reboot"
  fi

  echo "* Done!"
  exit 0
fi

# From here on we should only be running on the pi
echo "* Hello from the pi!"

echo "* Installing apt packages"
sudo apt update
sudo DEBIAN_FRONTEND=noninteractive apt upgrade -y
sudo DEBIAN_FRONTEND=noninteractive apt install -y \
  gstreamer1.0-tools gstreamer1.0-nice gstreamer1.0-plugins-bad gstreamer1.0-plugins-good gstreamer1.0-alsa \
  libssl-dev \
  alsa-utils

# To get gst-device-monitor-1.0 to work
#sudo apt install -y gstreamer1.0-plugins-base-apps pulseaudio

## Install audio drivers for the Adafruit Voice Bonnet
if [[ ! -d "seeed-voicecard" ]]; then
  echo "* Installing audio drivers for the Adafruit Voice Bonnet"
  git clone https://github.com/HinTak/seeed-voicecard
  pushd seeed-voicecard
  sudo DEBIAN_FRONTEND=noninteractive ./install.sh
  popd # seeed-voicecard

  # If this exists the systemd script will overwrite input.txt and output.txt with the correct configuration on next
  # boot. This is needed because the device id changes on the first reboot
  touch .seed-drivers-installed-system-not-rebooted
else
  echo "* Audio drivers for the Adafruit Voice Bonnet already installed"
fi

# Set the Adafruit Voice Bonnet as the input/output for boxen-client
CARD_ID="$(aplay -l | grep seeed | cut -d ' ' -f 2 | cut -d ':' -f 1)"
echo "alsasrc device=\"hw:$CARD_ID\"" > input.txt
echo "alsasink device=\"hw:$CARD_ID\"" > output.txt

echo ""
echo "* Bye from the pi!"
